Classes:

ENetInterface 
    Interfaces with the ENet library for I/O and packets queing

Entity
    Holds player state information
HostLogic
    Runs server sided game logic (host only)
ClientLogiic
    Runs client sided game logic (client only)

Game
    Instantiates level pointers for which level is currently being draw
Level 
    The current level being rendered/drawn






Main instantiates two classes game and gamelogic

The reason these two need to be created separately is because gamelogic needs to be able to run its updates faster than game

Game takes a pointer to gamelogic and passes the pointer to level classes

When the correct level is created (gamelevel) it will call startlogic on the gamelogic object

Gamelogic will instantiate ENetInterface and handle packet I/O




EDIT:
Main will instantiate game
Game will instantiate Gamelogic
Gamelogic will have a separate method just for updating gamelogicn and nothing else
This will allow Gamelogic to run its own updates separate from the levels draws / levels update


EDIT: 
Issue with latter design ,since Gamelogic contains network , this means network will keep getting reset every time game spawns a new logic object
We need a separate contains which will instantiate the network layer just once but is allowed to spawn new logic objects
NetLogic class can solve this